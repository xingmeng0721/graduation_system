# Generated by Django 5.2.6 on 2025-09-21 14:20

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('role', models.CharField(choices=[('student', '学生'), ('teacher', '教师'), ('admin', '管理员')], default='student', max_length=10, verbose_name='角色')),
                ('phone_number', models.CharField(blank=True, max_length=17, validators=[django.core.validators.RegexValidator(message="电话号码格式: '+999999999'. 最多15位数字.", regex='^\\+?1?\\d{9,15}$')], verbose_name='电话号码')),
                ('real_name', models.CharField(blank=True, max_length=50, verbose_name='真实姓名')),
                ('student_id', models.CharField(blank=True, max_length=20, null=True, unique=True, verbose_name='学号/工号')),
                ('department', models.CharField(blank=True, max_length=100, verbose_name='院系')),
                ('major', models.CharField(blank=True, max_length=100, verbose_name='专业')),
                ('grade', models.CharField(blank=True, max_length=10, verbose_name='年级')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': '用户',
                'verbose_name_plural': '用户',
                'db_table': 'accounts_user',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='StudentProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('gpa', models.FloatField(blank=True, null=True, verbose_name='GPA')),
                ('research_interests', models.TextField(blank=True, verbose_name='研究兴趣')),
                ('skills', models.TextField(blank=True, verbose_name='技能')),
                ('introduction', models.TextField(blank=True, verbose_name='自我介绍')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='student_profile', to=settings.AUTH_USER_MODEL, verbose_name='用户')),
            ],
            options={
                'verbose_name': '学生档案',
                'verbose_name_plural': '学生档案',
                'db_table': 'accounts_student_profile',
            },
        ),
        migrations.CreateModel(
            name='TeacherProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, max_length=50, verbose_name='职称')),
                ('research_areas', models.TextField(blank=True, verbose_name='研究领域')),
                ('max_students', models.PositiveIntegerField(default=5, verbose_name='最大指导学生数')),
                ('current_students', models.PositiveIntegerField(default=0, verbose_name='当前指导学生数')),
                ('introduction', models.TextField(blank=True, verbose_name='导师介绍')),
                ('requirements', models.TextField(blank=True, verbose_name='对学生要求')),
                ('is_accepting', models.BooleanField(default=True, verbose_name='是否接收新学生')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='teacher_profile', to=settings.AUTH_USER_MODEL, verbose_name='用户')),
            ],
            options={
                'verbose_name': '教师档案',
                'verbose_name_plural': '教师档案',
                'db_table': 'accounts_teacher_profile',
            },
        ),
    ]
